from random import randint

from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.urls import reverse
from django.views.generic import ListView, DetailView
from .models import Product, Category, FavoriteProducts, Profile, Gallery, SaveOrder, SaveOrderProducts
from .forms import LoginForm, RegistrationForm, CreateProfileForm, EditProfileForm, EditAccountForm, CustomerForm, \
    ShippingForm
from .filters import ProductFilter
from django.contrib.auth import login, logout, update_session_auth_hash
from django.contrib import messages
from .utils import *
from shop import settings
import stripe


# Create your views here.
class ProductList(ListView):
    model = Product
    context_object_name = 'categories'  # –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    extra_context = {
        'title': 'Digital Market'
    }
    template_name = 'digital/index.html'

    # –§—É–Ω–∫ —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–≤–æ–¥ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    def get_queryset(self):
        categories = Category.objects.filter(parent=None)

        return categories


class CategoryView(ListView):
    model = Product
    context_object_name = 'products'
    template_name = 'digital/category_page.html'
    paginate_by = 3

    # –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    def get_queryset(self):
        brand_field = self.request.GET.get('brand')
        color_field = self.request.GET.get('color')
        price_field = self.request.GET.get('price')
        discount_field = self.request.GET.get('discount')

        category = Category.objects.get(slug=self.kwargs['slug'])  # –ø–æ–ª—É—á–∏–ª–∏ –≥–ª–∞–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ß–∞—Å—ã
        products = Product.objects.filter(category=category)  # –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if brand_field:
            products = products.filter(brand__title=brand_field)

        if color_field:
            products = products.filter(color_name=color_field)

        if price_field:
            products = products.filter(price=price_field)

        if discount_field:
            products = products.filter(discount=discount_field)

        return products

    def get_context_data(self, *, object_list=None, **kwargs):
        context = super().get_context_data()
        category = Category.objects.get(slug=self.kwargs['slug'])
        products = Product.objects.filter(category=category)  # –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        myFilter = ProductFilter()
        brands = list(set([i.brand for i in products]))
        colors = list(set([i.color_name for i in products]))
        prices = list(set([int(i.price) for i in products]))
        discounts = list(set([i.discount for i in products]))

        context['brands'] = brands
        context['colors'] = colors
        context['discounts'] = discounts
        context['prices'] = sorted(prices)

        context['myFilter'] = myFilter
        context['category'] = category
        context['title'] = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title}'
        return context


def save_favorite_product(request, product_slug):
    user = request.user if request.user.is_authenticated else None
    product = Product.objects.get(slug=product_slug)
    favorite_products = FavoriteProducts.objects.filter(user=user)
    if user:
        if product in [i.product for i in favorite_products]:  # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫,  –¥–µ–ª–∞–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fav_product = FavoriteProducts.objects.get(user=user, product=product)
            messages.warning(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
            fav_product.delete()
        else:
            messages.success(request, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
            FavoriteProducts.objects.create(user=user, product=product)
    next_page = request.META.get('HTTP_REFERER', 'index')
    # HTTP_REFERER - —ç—Ç–æ —Å –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏—à—ë–ª —Å–∏–≥–Ω–∞–ª –∏ –ø–µ—Ä–µ–π–¥—ë–º –ª–∏–±–æ –Ω–∞ —Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ –±—ã–ª–∏ –∏–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    return redirect(next_page)


#  ---------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
# LoginRequiredMixin # –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å–ª—É–∂–∏—Ç —á—Ç–æ –±—ã –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –õ–æ–≥–∏–Ω–∞
class FavouriteProductsView(LoginRequiredMixin, ListView):
    model = FavoriteProducts
    context_object_name = 'products'
    template_name = 'digital/favourite_products.html'
    login_url = 'login'

    def get_queryset(self):
        user = self.request.user
        favs = FavoriteProducts.objects.filter(user=user)
        products = [i.product for i in favs]
        return products


class ProductDetail(DetailView):  # product_detail.html –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–æ–º –∏—â–µ—Ç
    model = Product
    context_object_name = 'product'

    # –º–µ—Ç–æ–¥ –¥–ª—è —à–∞–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ù–∞–∑–≤–∞–Ω–∏–µ
    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        product = Product.objects.get(slug=self.kwargs['slug'])  # –±–µ—Ä—ë–º —Ç–æ—Ç —Å–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º
        context['title'] = f'–¢–æ–≤–∞—Ä {product.title}'
        color = self.request.GET.get('color')
        print(color)
        if color:
            context['image'] = product.images.get(color=f'#{color}').image.url
        products = Product.objects.filter(category=product.category)  # –±–µ—Ä—ë–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        data = []
        for i in range(len(products)):
            random_index = randint(0, len(products) - 1)  # –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–æ–Ω–¥–æ–º–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            p = products[random_index]
            if p not in data and product != p:
                data.append(p)
        context['products'] = data

        return context


def user_login(request):
    if request.user.is_authenticated:
        return redirect('index')
    else:
        if request.method == 'POST':
            form = LoginForm(data=request.POST)
            if form.is_valid():
                user = form.get_user()
                if user:
                    login(request, user)
                    messages.success(request, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
                    return redirect('index')
                else:
                    messages.error(request, '–ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
                    return redirect('login')
            else:
                messages.error(request, '–ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
                return redirect('login')
        else:
            form = LoginForm()
        context = {
            'form': form,
            'title': '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç'
        }
        return render(request, 'digital/login.html', context)


def user_logout(request):
    logout(request)
    messages.success(request, '–£–∂–µ —É—Ö–æ–¥–∏—Ç–µ ? üò•')
    return redirect('index')


def register(request):
    if request.user.is_authenticated:
        return redirect('index')
    else:
        if request.method == 'POST':
            form = RegistrationForm(request.POST)
            if form.is_valid():
                user = form.save()
                # login(request, user)
                form2 = CreateProfileForm(request.POST, request.FILES)
                if form2.is_valid():
                    profile = form2.save(commit=False)
                    profile.user = user
                    profile.save()

                    messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç')
                    return redirect('login')
            else:
                for field in form.errors:
                    messages.error(request, form.errors[field].as_text())
                    print(form.errors[field].as_text())
                return redirect('register')
        else:
            form = RegistrationForm()
            form2 = CreateProfileForm()
        context = {
            'form': form,
            'form2': form2,
            'title': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
        return render(request, 'digital/register.html', context)


def profile_view(request, pk):
    if request.user.is_authenticated:
        profile = Profile.objects.get(user_id=pk)
        customer = Customer.objects.get(user_id=pk)
        orders = SaveOrder.objects.filter(customer_id=customer.pk)
        print('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', orders)
        context = {
            'profile': profile,
            'orders': orders
        }
        return render(request, 'digital/profile.html', context)
    else:
        return redirect('login')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ê–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è
def chg_profile_view(request):
    if request.user.is_authenticated:
        edit_account_form = EditAccountForm(instance=request.user if request.user.is_authenticated else None)
        edit_profile_form = EditProfileForm(instance=request.user.profile if request.user.is_authenticated else None)
        context = {
            'edit_account_form': edit_account_form,
            'edit_profile_form': edit_profile_form
        }
        messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
        return render(request, 'digital/chg_profile.html', context)
    else:
        messages.error(request, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        return redirect('login')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ê–∫–∫–∞—É–Ω—Ç–∞ –∏ –ü—Ä–æ—Ñ–∏–ª—è
@login_required
def edit_account_view(request):
    if request.user.is_authenticated:
        if request.method == 'POST':
            form = EditAccountForm(request.POST, instance=request.user)
            form2 = EditProfileForm(request.POST, request.FILES, instance=request.user.profile)
            if form.is_valid() and form2.is_valid():
                data = form.cleaned_data
                form2.save()
                user = User.objects.get(id=request.user.id)
                if user.check_password(data['old_password']):
                    if data['old_password'] and data['new_password'] == data['confirm_password']:
                        user.set_password(data['new_password'])
                        user.save()
                        update_session_auth_hash(request, user)
                        messages.warning(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
                        return redirect('profile', user.pk)
                    else:
                        for field in form.errors:
                            messages.error(request, form.errors[field].as_text())
                else:
                    for field in form.errors:
                        messages.error(request, form.errors[field].as_text())

                form.save()
            else:
                for field in form.errors:
                    messages.error(request, form.errors[field].as_text())

            user = request.user
            return redirect('profile', user.pk)
    else:
        return redirect('login')


def cart(request):
    # –∫–∞–∫ –±—É–¥–∏—Ç –≥–æ—Ç–æ–≤ utils.py –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É
    if request.user.is_authenticated:
        cart_info = get_cart_data(request)
        print(cart_info['products'])

        context = {
            'cart_total_quantity': cart_info['cart_total_quantity'],
            'order': cart_info['order'],
            'products': cart_info['products']
        }
        print(context)

        return render(request, 'digital/my_cart.html', context)
    else:
        return redirect('login')


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ü–≤–µ—Ç—É
def product_by_color(request, model_product, color):
    product = Product.objects.get(model_product_id=model_product, color=color)
    products = Product.objects.filter(category=product.category)  # –±–µ—Ä—ë–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    data = []
    for i in range(len(products)):
        random_index = randint(0, len(products) - 1)  # –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–æ–Ω–¥–æ–º–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        p = products[random_index]
        if p not in data and product != p:
            data.append(p)

    context = {
        'product': product,
        'products': data
    }
    return render(request, 'digital/product_detail.html', context)


def to_cart(request, product_id, action):
    # –∫–∞–∫ –±—É–¥–∏—Ç –≥–æ—Ç–æ–≤ utils.py –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É
    if request.user.is_authenticated:
        user_cart = CartForAuthenticatedUser(request, product_id, action)
        next_page = request.META.get('HTTP_REFERER', 'index')
        messages.success(request, '–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        return redirect(next_page)
    else:
        messages.error(request, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏')
        return redirect('login_registration')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
def clear(request):
    user_cart = CartForAuthenticatedUser(request)  # –†–æ–∂–¥–∞–µ—Ç—å—Å—è –∫–ª–∞—Å—Å
    order = user_cart.get_cart_info()['order']  # –ø–æ–ª—É—á–∞—é –∑–∞–∫–∞–∑
    order_products = order.orderproduct_set.all()  # –ø–æ–ª—É—á–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–∫–∞–∑–∞
    for order_product in order_products:  # –ø—Ä–æ—Ö–æ–∂—É—Å—å —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∫–æ—Ä–∑–∏–Ω—ã
        quantity = order_product.quantity  # –ø–æ–ª—É—á–∞—é –∫–æ–ª-–≤–æ
        product = order_product.product  # –ø–æ–ª—É—á–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã
        order_product.delete()  # —É–¥–≤–ª—è—é  –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–∫–∞–∑–∞
        product.quantity += quantity  # –ø—Ä–æ–¥—É–∫—Ç—ã –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∑–≤—Ä—è—â–∞—é –≤ –∫–æ–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥
        product.save()  # —Å–æ—Ö—Ä–∞–Ω—è—é.
    messages.warning(request, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
    return redirect('cart')


def checkout(request):
    # –∫–∞–∫ –±—É–¥–∏—Ç –≥–æ—Ç–æ–≤ utils.py –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É
    cart_info = get_cart_data(request)

    context = {
        # –∫–∞–∫ –±—É–¥–∏—Ç –≥–æ—Ç–æ–≤ utils.py –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É
        'cart_total_quantity': cart_info['cart_total_quantity'],
        'order': cart_info['order'],
        'items': cart_info['products'],

        'customer_form': CustomerForm(),
        'shipping_form': ShippingForm(),
        'title': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'
    }
    return render(request, 'digital/checkout.html', context)


#  ---------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ stripe
def create_checkout_session(request):
    stripe.api_key = settings.STRIPE_SECRET_KEY
    if request.method == 'POST':
        user_cart = CartForAuthenticatedUser(request)  # –†–æ–∂–¥–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å –ö–æ—Ä–∑–∏–Ω—ã
        cart_info = user_cart.get_cart_info()  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–∑–∏–Ω–µ

        customer_form = CustomerForm(data=request.POST)
        if customer_form.is_valid():
            customer = Customer.objects.get(user=request.user)
            customer.first_name = customer_form.cleaned_data['first_name']
            customer.last_name = customer_form.cleaned_data['last_name']
            customer.email = customer_form.cleaned_data['email']
            customer.save()
            user = User.objects.get(username=request.user.username)
            user.first_name = customer_form.cleaned_data['first_name']
            user.last_name = customer_form.cleaned_data['last_name']
            user.email = customer_form.cleaned_data['email']
            user.save()

        shipping_form = ShippingForm(data=request.POST)
        if shipping_form.is_valid():
            address = shipping_form.save(commit=False)
            address.customer = Customer.objects.get(user=request.user)
            address.order = user_cart.get_cart_info()['order']
            address.save()
        else:
            for field in shipping_form.errors:
                messages.error(request, shipping_form.errors[field].as_text())
                print(shipping_form.errors[field].as_text())

        total_price = cart_info['cart_total_price']
        session = stripe.checkout.Session.create(
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': '—Ç–æ–≤–∞—Ä—ã —Å TOTEMBO'
                    },
                    'unit_amount': int(total_price)
                },
                'quantity': 1
            }],
            mode='payment',
            success_url=request.build_absolute_uri(reverse('success')),
            cancel_url=request.build_absolute_uri(reverse('success'))
        )
        return redirect(session.url, 303)


def success_payment(request):
    if request.user.is_authenticated:
        user_cart = CartForAuthenticatedUser(request)
        cart_info = user_cart.get_cart_info()  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–∑–∏–Ω–µ
        order = cart_info['order']
        order_save = SaveOrder.objects.create(customer=order.customer, total_price=order.get_cart_total_price)
        order_save.save()
        order_products = order.orderproduct_set.all()
        for product in order_products:
            save_order_product = SaveOrderProducts.objects.create(order_id=order_save.pk,
                                                                  product=str(product),
                                                                  quantity=product.quantity,
                                                                  product_price=product.product.price,
                                                                  final_price=product.get_total_price,
                                                                  photo=product.product.get_first_photo(),
                                                                  color_name=product.product.color_name)
            print('–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤')
            save_order_product.save()
        user_cart.clear()
        messages.success(request, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        return render(request, 'digital/success.html')
    else:
        return redirect('index')




















